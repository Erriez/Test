# Continues Integration configuration for Windows and Linux
#
# Select Settings | Actions | General | Workflow permissions | "Read and write permission"
#

name: CI

# Controls when the workflow will run
on:
  push:
    branches: [ "main", "staging/erriez/*" ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ "main", "staging/erriez/*" ]

  # Allows to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Get release version
        id: vars
        shell: bash
        run: |
          if [ "${{github.ref_type}}" == "tag" ]; then
            # Release version in format "1.0.0" without v
            RELEASE_VERSION=${{github.ref_name}}
            RELEASE_VERSION=${RELEASE_VERSION:1}
            RELEASE_ID=${{github.ref_name}}
          else
            # Default release version v0.0.0 when tag not found
            RELEASE_VERSION=0.0.0
            RELEASE_ID=b${{github.run_number}}
          fi

          echo "GITHUB_REF: ${GITHUB_REF}"
          echo "GITHUB_SHA: ${GITHUB_SHA}"
          echo "RELEASE_VERSION: ${RELEASE_VERSION}"
          echo "RELEASE_ID: ${RELEASE_ID}"

          echo "release_version=${RELEASE_VERSION}" >> $GITHUB_OUTPUT
          echo "release_id=${RELEASE_ID}" >> $GITHUB_OUTPUT

      - name: Check-out repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          architecture: 'x64'
          cache: 'pip'
          cache-dependency-path: |
            **/requirements*.txt

      - name: Save version.txt
        run: |
          echo "v${{steps.vars.outputs.release_version}}" > data/version.txt
          echo "Contents file data/version.txt:"
          cat data/version.txt

      - name: Build single executable
        run: |
          pip install pyinstaller
          pyinstaller --onefile --noconsole --name erriez-test test.py

      - name: Create Windows NSIS installer
        if: runner.os == 'Windows'
        uses: joncloud/makensis-action@v4.1
        with:
          script-file: "nsis/install.nsi"
          # VERSION must be in x.x.x format
          arguments: "/V4 /DVERSION=${{steps.vars.outputs.release_version}} /DOUTPUT=dist/erriez-test-win64-setup-${{steps.vars.outputs.release_id}}.exe"

      - name: Create Linux installer
        if: runner.os == 'Linux'
        run: |
          # Install Linux system dependencies
          sudo apt install makeself

          # Create Linux installer
          OUTPUT_FILE=dist/erriez-test-linux-setup-${{steps.vars.outputs.release_id}}.run
          installer-linux/create_linux_installer.sh ${OUTPUT_FILE}

      - name: Windows post build
        if: runner.os == 'Windows'
        shell: bash
        run: |
          # Rename portable executable
          mv dist/erriez-test.exe dist/erriez-test-win64-portable-${{steps.vars.outputs.release_id}}.exe

      - name: Create Windows executable hashes
        if: runner.os == 'Windows'
        shell: bash
        run: |
          sha1sum dist/erriez-test-win64-portable-${{steps.vars.outputs.release_id}}.exe > dist/erriez-test-win64-portable-${{steps.vars.outputs.release_id}}.exe.sha1
          sha1sum dist/erriez-test-win64-setup-${{steps.vars.outputs.release_id}}.exe > dist/erriez-test-win64-setup-${{steps.vars.outputs.release_id}}.exe.sha1
          cat dist/erriez-test-win64-portable-${{steps.vars.outputs.release_id}}.exe.sha1
          cat dist/erriez-test-win64-setup-${{steps.vars.outputs.release_id}}.exe.sha1

      - name: Create Linux executable hashes
        if: runner.os == 'Linux'
        run: |
          mv dist/erriez-test dist/erriez-test-linux-portable-${{steps.vars.outputs.release_id}}

          sha1sum dist/erriez-test-linux-portable-${{steps.vars.outputs.release_id}} > dist/erriez-test-linux-portable-${{steps.vars.outputs.release_id}}.sha1
          sha1sum dist/erriez-test-linux-setup-${{steps.vars.outputs.release_id}}.run > dist/erriez-test-linux-setup-${{steps.vars.outputs.release_id}}.run.sha1
          cat dist/erriez-test-linux-portable-${{steps.vars.outputs.release_id}}.sha1
          cat dist/erriez-test-linux-setup-${{steps.vars.outputs.release_id}}.run.sha1

      - name: Prepare artifacts
        shell: bash
        run: |
          cp LICENSE dist/
          
          echo "[InternetShortcut]" > website.url
          echo "URL=${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}" >> dist/website.url
          cat dist/website.url
          
          ls -la dist

      - name: Upload Windows Artifacts
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: erriez-test-windows-${{steps.vars.outputs.release_id}}
          if-no-files-found: error
          path: |
            dist/LICENSE
            dist/website.url
            dist/erriez-test-win64-portable-${{steps.vars.outputs.release_id}}.exe
            dist/erriez-test-win64-portable-${{steps.vars.outputs.release_id}}.exe.sha1
            dist/erriez-test-win64-setup-${{steps.vars.outputs.release_id}}.exe
            dist/erriez-test-win64-setup-${{steps.vars.outputs.release_id}}.exe.sha1

      - name: Upload Linux Artifacts
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: erriez-test-linux-${{steps.vars.outputs.release_id}}
          if-no-files-found: error
          path: |
            dist/LICENSE
            dist/website.url
            dist/erriez-test-linux-portable-${{steps.vars.outputs.release_id}}
            dist/erriez-test-linux-portable-${{steps.vars.outputs.release_id}}.sha1
            dist/erriez-test-linux-setup-${{steps.vars.outputs.release_id}}.run
            dist/erriez-test-linux-setup-${{steps.vars.outputs.release_id}}.run.sha1

  release:
    name: "Create Github release"
    needs: build  # [ build-windows, build-linux ]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Pushed tag
        run: echo ${{ github.ref_name }}

      - name: Check-out repository
        uses: actions/checkout@v4

      - name: Download and extract artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: |
          ls -R

      - name: Add files to Github release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            LICENSE
            ${{ github.workspace }}/artifacts/erriez-test-linux-${{github.ref_name}}/erriez-test-linux-portable-${{github.ref_name}}
            ${{ github.workspace }}/artifacts/erriez-test-linux-${{github.ref_name}}/erriez-test-linux-portable-${{github.ref_name}}.sha1
            ${{ github.workspace }}/artifacts/erriez-test-linux-${{github.ref_name}}/erriez-test-linux-setup-${{github.ref_name}}.run
            ${{ github.workspace }}/artifacts/erriez-test-linux-${{github.ref_name}}/erriez-test-linux-setup-${{github.ref_name}}.run.sha1
            ${{ github.workspace }}/artifacts/erriez-test-windows-${{github.ref_name}}/erriez-test-win64-portable-${{github.ref_name}}.exe
            ${{ github.workspace }}/artifacts/erriez-test-windows-${{github.ref_name}}/erriez-test-win64-portable-${{github.ref_name}}.exe.sha1
            ${{ github.workspace }}/artifacts/erriez-test-windows-${{github.ref_name}}/erriez-test-win64-setup-${{github.ref_name}}.exe
            ${{ github.workspace }}/artifacts/erriez-test-windows-${{github.ref_name}}/erriez-test-win64-setup-${{github.ref_name}}.exe.sha1

      - name: Set GitHub release description
        uses: Roang-zero1/github-create-release-action@v3
        with:
          update_existing: true
          version_regex: ^v[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
